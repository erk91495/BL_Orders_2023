<!-- Copyright (c) Microsoft Corporation and Contributors. -->
<!-- Licensed under the MIT License. -->

<Page
    x:Class="BlOrders2023.Views.OrderDetailsPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="using:BlOrders2023.Views"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:vm="using:BlOrders2023.ViewModels.Converters"
    xmlns:models="using:BlOrders2023.Models"
    xmlns:sf="using:Syncfusion.UI.Xaml.DataGrid"
    xmlns:editors="using:Syncfusion.UI.Xaml.Editors"
    xmlns:calendar="using:Syncfusion.UI.Xaml.Calendar"
    xmlns:converters="using:CommunityToolkit.WinUI.UI.Converters" 
    xmlns:enums="using:BlOrders2023.Models.Enums"
    mc:Ignorable="d"
    Background="{ThemeResource ApplicationPageBackgroundThemeBrush}">

    <Page.Resources>
        <vm:DecimalToDoubleConverter x:Key="DecimalToDoubleConverter"/>
        <vm:FloatToDoubleConverter x:Key="FloatToDoubleConverter"/>
        <vm:EnumToBoolConverter x:Key="EnumToBoolConverter"/>
        <vm:DateTimeToDateTimeOffsetConverter x:Key="DateTimeToDateTimeOffsetConverter"/>
        <converters:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
        <converters:BoolNegationConverter x:Key="BoolNegationConverter"/>
    </Page.Resources>
    <RelativePanel Margin="10,10,10,0">
        <StackPanel x:Name="OrderNumber"
                    Orientation="Horizontal" 
                    RelativePanel.AlignTopWithPanel="True"
                    RelativePanel.AlignLeftWithPanel="True">
            <TextBlock x:Uid="Order_OrderNumber" 
                                   FontSize="{StaticResource LargeFontSize}"
                                   FontWeight="SemiBold"/>
            <TextBlock Text="{x:Bind ViewModel.OrderID, Mode=OneWay}" 
                                   FontSize="{StaticResource LargeFontSize}"
                                   FontWeight="SemiBold"/>
        </StackPanel>

        <StackPanel x:Name="CustomerInfo"  
                    Orientation="Vertical"
                    RelativePanel.Below="OrderNumber"
                    RelativePanel.AlignLeftWithPanel="True">
            <TextBlock Text="{x:Bind ViewModel.Customer.CustomerName, Mode=OneWay}"
                               FontSize="{StaticResource LargeFontSize}"/>
            <TextBlock Text="{x:Bind ViewModel.Customer.Address, Mode=OneWay}"
                               FontSize="{StaticResource MediumFontSize}"/>
            <TextBlock Text="{x:Bind ViewModel.Customer.CityStateZip(), Mode=OneWay}"
                               FontSize="{StaticResource MediumFontSize}"/>
            <TextBlock Text="{x:Bind ViewModel.Customer.Buyer, Mode=OneWay}"
                               FontSize="{StaticResource MediumFontSize}"
                               Padding="0,20,0,0"/>
            <TextBlock Text="{x:Bind ViewModel.Customer.PhoneString(), Mode=OneWay}"
                               FontSize="{StaticResource MediumFontSize}"
                               Visibility="{x:Bind vm:Converters.CollapsedIfNullOrEmpty(ViewModel.Customer.Phone), Mode=OneWay, FallbackValue=Collapsed}"/>
            <TextBlock Text="{x:Bind ViewModel.Customer.Fax, Mode=OneWay}"
                               FontSize="{StaticResource MediumFontSize}"
                               Visibility="{x:Bind vm:Converters.CollapsedIfNullOrEmpty(ViewModel.Customer.Fax), Mode=OneWay, FallbackValue=Collapsed}"/>
            <TextBlock IsTabStop="False">
                <TextBlock.Inlines>
                    <Hyperlink Click="EmailButton_Click" IsTabStop="False">
                        <Hyperlink.Inlines>
                            <Span>
                                <Run Text="{x:Bind ViewModel.Customer.Email, Mode=OneWay}"></Run>
                            </Span>
                        </Hyperlink.Inlines>
                    </Hyperlink>
                </TextBlock.Inlines>
            </TextBlock>
    
        </StackPanel>
        <StackPanel x:Name="OrderInfo"
                    Orientation="Vertical"
                    RelativePanel.AlignRightWithPanel="True">
            <Button HorizontalAlignment="Right" IsTabStop="False">
                <SymbolIcon Symbol="More"/>
                <Button.Flyout>
                    <MenuFlyout Placement="Bottom">
                        <MenuFlyoutItem Text="Save Order" Icon="Save" Click="SaveOrderFlyoutItem_Click" KeyboardAcceleratorPlacementMode="Auto">
                            <MenuFlyoutItem.KeyboardAccelerators>
                                <KeyboardAccelerator Key="S" Modifiers="Control"/>
                            </MenuFlyoutItem.KeyboardAccelerators>
                        </MenuFlyoutItem>
                        <MenuFlyoutItem Text="Delete Order" Icon="Delete" Click="DeleteOrderFlyoutItem_Click"/>
                    </MenuFlyout>
                </Button.Flyout>
            </Button>


            <TextBlock Text="{x:Bind ViewModel.OrderStatus, Mode=OneWay}"
                            HorizontalTextAlignment="Center"
                            HorizontalAlignment="Stretch"
                            Padding="0,10,0,5"
                            FontSize="50"
                            FontWeight="SemiBold"/>
            <ComboBox x:Name="OrderStatusCombo"
                      xmlns:ui="using:CommunityToolkit.WinUI.UI"
                      ItemsSource="{ui:EnumValues Type=enums:OrderStatus}"
                      SelectedItem="{x:Bind ViewModel.OrderStatus, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>

        </StackPanel>
        <RelativePanel x:Name="UserInputRanel"
                       RelativePanel.Below="CustomerInfo"
                       RelativePanel.AlignLeftWithPanel="True"
                       RelativePanel.AlignRightWithPanel="True">
            <Grid x:Name="OrderInputGrid"
                  ColumnSpacing="20"
                  RowSpacing="20"
                  MinWidth="500"
                  Padding="0,0,0,20">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="*"/>
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                
                <StackPanel Orientation="Vertical"
                            Grid.Row="0"
                            Grid.Column="0">
                    <TextBlock Text="Taken By:"/>
                    <TextBox Text="{x:Bind ViewModel.TakenBy, Mode=TwoWay}" TabIndex="1"/>
                    <TextBlock Text="{x:Bind ViewModel.GetErrorMessage('TakenBy'), Mode=OneWay}" 
                               Visibility="{x:Bind ViewModel.VisibleIfError('TakenBy'), Mode=OneWay}" 
                               Style="{StaticResource ValidatorTextBlockStyle}"/>
                </StackPanel>

                <RadioButtons Header="Shipping Type"
                              Grid.Row="0"
                              Grid.Column="1"
                              SelectionChanged="RadioButtons_SelectionChanged"
                              IsTabStop="False"
                              TabIndex="2"
                              >
                    <RadioButton x:Name="RadioPickUp"  
                                 Content="Pickup"
                                 IsChecked="{x:Bind ViewModel.Shipping, Converter={StaticResource EnumToBoolConverter}, ConverterParameter=Pickup}"/>
                    <RadioButton x:Name="RadioDelivery" 
                                 Content="Delivery"
                                 IsChecked="{x:Bind ViewModel.Shipping, Converter={StaticResource EnumToBoolConverter}, ConverterParameter=Shipping}"/>
                </RadioButtons>

                <StackPanel Orientation="Vertical"
                            Grid.Row="1"
                            Grid.Column="0">
                    <TextBlock Text="PO #"/>
                    <TextBox Text="{x:Bind ViewModel.PO_Number, Mode=TwoWay}"/>
                </StackPanel>

                <StackPanel Orientation="Vertical"
                            Grid.Row="0"
                            Grid.Column="2">
                    <StackPanel Orientation="Vertical">
                        <TextBlock Text="Pickup/Delivery Date:"/>
                        <calendar:SfCalendarDatePicker x:Name="PickupDate"
                                                       AllowNull="False"
                                                       SelectedDate="{x:Bind ViewModel.PickupDate, Mode=TwoWay, Converter={StaticResource DateTimeToDateTimeOffsetConverter}}"
                                                       TabIndex="3"/>
                        <TextBlock Text="{x:Bind ViewModel.GetErrorMessage('PickupDate'), Mode=OneWay}" 
                               Visibility="{x:Bind ViewModel.VisibleIfError('PickupDate'), Mode=OneWay}" 
                               Style="{StaticResource ValidatorTextBlockStyle}"/>
                    </StackPanel>
                    <StackPanel x:Name="PickupTimeStack"  Orientation="Vertical">
                        <TextBlock Text="Pickup Time:"/>
                        <editors:SfTimePicker x:Name="PickupTime"
                                              AllowNull="False"
                                              SelectedTime="{x:Bind ViewModel.PickupTime, Mode=TwoWay, Converter={StaticResource DateTimeToDateTimeOffsetConverter}}"
                                              TabIndex="4"/>
                    </StackPanel>
                </StackPanel>

                <StackPanel Orientation="Horizontal"
                            Grid.Row="1"
                            Grid.Column="2">
                    <TextBlock Text="Frozen:" 
                               VerticalAlignment="Center"
                               Padding="0,0,10,0"/>
                    <CheckBox IsChecked="{x:Bind ViewModel.Frozen, Mode=TwoWay}" 
                              VerticalAlignment="Center"
                              IsTabStop="False"/>
                </StackPanel>
            </Grid>
            <StackPanel x:Name="MemoStack"
                        Orientation="Vertical" 
                        RelativePanel.AlignRightWithPanel="True"
                        RelativePanel.RightOf="OrderInputGrid"
                        Padding="40,0,0,0">
                <TextBlock Text="Memo:"/>
                <TextBlock Text="{x:Bind ViewModel.GetErrorMessage('Memo'), Mode=OneWay}" 
                               Visibility="{x:Bind ViewModel.VisibleIfError('Memo'), Mode=OneWay}" 
                               Style="{StaticResource ValidatorTextBlockStyle}"/>
                <TextBox Text="{x:Bind ViewModel.Memo, Mode=TwoWay, TargetNullValue={x:Null}}"
                         TextWrapping="Wrap"
                         Margin="5,5,5,5"
                         MinHeight="75"
                         MinWidth="500"
                         AcceptsReturn="True"
                         Background="Transparent"
                         BorderBrush="{ThemeResource TextFillColorPrimary}"
                         BorderThickness="1"/>
                <StackPanel Orientation="Vertical">
                    <StackPanel Orientation="Horizontal" 
                            HorizontalAlignment="Right"
                            Padding="0,10,0,0">
                        <!--<TextBlock Text="Memo Weight: " VerticalAlignment="Center"/>
                        <NumberBox x:Name="MemoWeight"
                               Value="{x:Bind ViewModel.Memo_Weight, Mode=TwoWay, Converter={StaticResource FloatToDoubleConverter}}"
                               Background="Transparent"
                               />-->
                    </StackPanel>
                    <StackPanel Orientation="Horizontal"
                                HorizontalAlignment="Right">
                        <TextBlock Text="Memo Total: $" VerticalAlignment="Center"/>
                        <NumberBox x:Name="MemoTotal"
                                   Value="{x:Bind ViewModel.Memo_Totl, Mode=TwoWay, Converter={StaticResource DecimalToDoubleConverter}}"
                                   Background="Transparent"
                                   IsTabStop="False"    
                                   />
                    </StackPanel>
                </StackPanel>
            </StackPanel>
        </RelativePanel>
        <sf:SfDataGrid x:Name="OrderedItems"
                       ItemsSource="{x:Bind ViewModel.Items, Mode=TwoWay}"
                       SourceType="models:OrderItem"
                       RelativePanel.Below="ProductEntryErrorMessage"
                       GridLinesVisibility="Both"
                       IsReadOnly="False"
                       AutoGenerateColumns="False"
                       RelativePanel.AlignLeftWithPanel="True"
                       RelativePanel.AlignRightWithPanel="True"
                       EditTrigger="OnTap"
                       SelectionUnit="Row"
                       EditorSelectionBehavior="MoveLast"
                       PointerMoved="OrderedItems_PointerMoved"
                       IsTabStop="False">
            
            <sf:SfDataGrid.Columns>
                <sf:GridTextColumn HeaderText="Product ID" MappingName="ProductID"/>
                <sf:GridTextColumn HeaderText="Product Name" MappingName="Product.ProductName" IsReadOnly="True" ColumnWidthMode="AutoLastColumnFill"/>
                <sf:GridNumericColumn HeaderText="Pick Weight" MappingName="PickWeight" AllowEditing="False" DisplayNumberFormat="N2"/>
                <sf:GridNumericColumn HeaderText="Customer Price" MappingName="ActualCustPrice" AllowEditing="True" DisplayNumberFormat="C"/>
                <sf:GridNumericColumn HeaderText="Quantity Ordered" MappingName="Quantity" AllowEditing="True"/>
                <sf:GridNumericColumn HeaderText="Quantity Received" MappingName="QuantityReceived" />
                <sf:GridUnboundColumn HeaderText="" UseBindingValue="False" MappingName="UnboundColumn" ColumnWidthMode="SizeToCells">
                    <sf:GridUnboundColumn.CellTemplate>
                        <DataTemplate>
                            <Button x:Name="DeleteRow" Click="DeleteRow_Click" IsTabStop="False">
                                <SymbolIcon Symbol="Delete"/>
                            </Button>
                        </DataTemplate>
                    </sf:GridUnboundColumn.CellTemplate>
                </sf:GridUnboundColumn>
            </sf:SfDataGrid.Columns>
        </sf:SfDataGrid>

        <AutoSuggestBox x:Name="ProductEntryBox"
                        RelativePanel.Below="UserInputRanel"
                        ItemsSource="{x:Bind ViewModel.SuggestedProducts, Mode=OneWay}"
                        MinWidth="500"
                        TextChanged="ProductEntryBox_TextChanged"
                        PlaceholderText="Add a product..."
                        Padding="0,0,0,10"
                        QuerySubmitted="ProductEntryBox_QuerySubmitted"
                        TabIndex="5"
                        GotFocus="ProductEntryBox_GotFocus"
                        LostFocus="ProductEntryBox_LostFocus"                        
                        IsEnabled="{x:Bind ViewModel.CanAddItems, Mode=OneWay}">
            <AutoSuggestBox.ItemTemplate>
                <DataTemplate x:DataType="models:Product">
                    <StackPanel Orientation="Horizontal"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Stretch">
                        <TextBlock Text="{x:Bind ProductID}" HorizontalAlignment="Stretch" Padding="0,0,10,0"/>
                        <TextBlock Text="{x:Bind ProductName}" HorizontalAlignment="Stretch"/>
                    </StackPanel>
                </DataTemplate>
            </AutoSuggestBox.ItemTemplate>

        </AutoSuggestBox>
        <TextBlock x:Name="ProductEntryErrorMessage"
                   RelativePanel.Below="ProductEntryBox"
                   Text="Clear all errors before adding products" 
                   Visibility="{x:Bind ViewModel.HasErrors, Mode=OneWay}" 
                   Style="{StaticResource ValidatorTextBlockStyle}"/>
        <Grid RelativePanel.AlignBottomWithPanel="True" RelativePanel.AlignLeftWithPanel="True" RelativePanel.AlignRightWithPanel="True">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <AppBarButton x:Name="PreviousOrderButton" 
                          Icon="Back" 
                          Grid.Column="0" 
                          HorizontalAlignment="Left" 
                          IsEnabled="{x:Bind ViewModel.HasPreviousOrder, Mode=OneWay}" 
                          Click="OrderNavigation_Click"
                          IsTabStop="False"/>
            <AppBarButton x:Name="NextOrderButton" 
                          Icon="Forward" 
                          Grid.Column="1" 
                          HorizontalAlignment="Right" 
                          IsEnabled="{x:Bind ViewModel.HasNextOrder, Mode=OneWay}"
                          Click="OrderNavigation_Click"
                          IsTabStop="False"/>
        </Grid>
    </RelativePanel>
</Page>
